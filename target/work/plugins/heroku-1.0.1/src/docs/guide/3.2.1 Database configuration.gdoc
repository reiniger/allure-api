You don't need to change anything in @DataSource.groovy@ since the plugin reconfigures the settings when the application starts up. The plugin will set the @driverClassName@ to 'org.postgresql.Driver' and the @dialect@ to @org.hibernate.dialect.PostgreSQLDialect@, and change the @url@, @username@, and @password@ to the values detected from the system properties for your PostgreSQL instance.

You'll need the JDBC driver for the PostgreSQL database, so add a dependency for it in @BuildConfig.groovy@. Add the @mavenCentral()@ repository (and optionally @mavenLocal()@):

{code}
repositories {
   grailsPlugins()
   grailsHome()
   grailsCentral()

   mavenLocal()
   mavenCentral()
}
{code}

and the jar dependency:

{code}
dependencies {
   runtime 'postgresql:postgresql:8.4-702.jdbc3'
}
{code}

Add a couple of domain classes so we can test the database:

{code}
$ grails create-domain-class database.Author
$ grails create-domain-class database.Book
{code}

Edit the classes so they look like these:

{code}
package database

class Author {
   String name

   String toString() { name }

   static hasMany = [books: Book]

   static mapping = {
      cache true
   }
}
{code}

{code}
package database

class Book {
   String title

   String toString() { title }

   static belongsTo = [author: Author]

   static mapping = {
      cache true
   }
}
{code}

